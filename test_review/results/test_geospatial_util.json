{
  "metadata": {
    "purpose": "Demonstrates FloPy's geospatial utilities for working with geometric shapes like polygons, points, and lines, including GeoJSON conversion and spatial collections",
    "primary_phase": 7,
    "modflow_version": "mf6",
    "packages_used": [
      "utils.geometry",
      "utils.geospatial_utils"
    ],
    "keywords": [
      "geospatial",
      "geometry",
      "polygon",
      "point",
      "linestring",
      "multipolygon",
      "GeoJSON",
      "shapefile",
      "spatial",
      "GIS"
    ]
  },
  "models": [
    {
      "name": "geospatial_utilities_demo",
      "description": "Demonstrates FloPy's geospatial utilities for creating and manipulating geometric shapes used in groundwater modeling",
      "code": "import numpy as np\nimport flopy\nfrom flopy.utils.geometry import (\n    Point, LineString, Polygon, MultiPoint, \n    MultiLineString, MultiPolygon, Collection\n)\nfrom flopy.utils.geospatial_utils import GeoSpatialUtil, GeoSpatialCollection\n\n# Phase 1: Create basic MODFLOW 6 model for spatial context\nname = 'geospatial_demo'\nsim = flopy.mf6.MFSimulation(sim_name=name, sim_ws='.')\n\n# Time discretization\ntdis = flopy.mf6.ModflowTdis(sim, nper=1, perioddata=[(1.0, 1, 1.0)])\n\n# Create groundwater flow model\ngwf = flopy.mf6.ModflowGwf(sim, modelname=name)\n\n# Discretization - aligned with real coordinates\ndis = flopy.mf6.ModflowGwfdis(\n    gwf,\n    nlay=1,\n    nrow=10, \n    ncol=10,\n    delr=100.0,\n    delc=100.0,\n    top=10.0,\n    botm=0.0,\n    xorigin=-121.4,  # Longitude origin\n    yorigin=38.54     # Latitude origin\n)\n\n# Phase 2: Node property flow\nnpf = flopy.mf6.ModflowGwfnpf(gwf, k=10.0)\n\n# Phase 3: Initial conditions\nic = flopy.mf6.ModflowGwfic(gwf, strt=5.0)\n\n# Phase 4: Add CHD boundary\nchd = flopy.mf6.ModflowGwfchd(gwf, stress_period_data=[[(0, 0, 0), 4.5]])\n\n# Phase 5: Solver\nims = flopy.mf6.ModflowIms(sim)\n\n# Phase 6: Output control\noc = flopy.mf6.ModflowGwfoc(gwf, printrecord=[('HEAD', 'ALL')])\n\n# Phase 7: Demonstrate geospatial utilities\nprint('\\n=== FloPy Geospatial Utilities Demo ===')\nprint('\\nPhase 7: Post-processing with Geospatial Features\\n')\n\n# Create Point geometry\npoint = Point(-121.358560, 38.567760)\nprint(f'Point: {point.type} at ({point.x}, {point.y})')\n\n# Create LineString geometry\nline_coords = [\n    (-121.360899, 38.563478),\n    (-121.358161, 38.566511),\n    (-121.355936, 38.564727),\n    (-121.354738, 38.567047)\n]\nlinestring = LineString(line_coords)\nprint(f'LineString: {linestring.type} with {len(linestring.coords)} vertices')\n\n# Create Polygon geometry\npoly_coords = [\n    (-121.389308, 38.560816),\n    (-121.385435, 38.555018),\n    (-121.370609, 38.557232),\n    (-121.369932, 38.560575),\n    (-121.359327, 38.562767),\n    (-121.358641, 38.565972),\n    (-121.363391, 38.568835),\n    (-121.389308, 38.560816)\n]\npolygon = Polygon(poly_coords)\nprint(f'Polygon: {polygon.type} with {len(polygon.exterior)} vertices')\n\n# Create Polygon with hole\nouter_ring = [\n    (-121.383097, 38.565764),\n    (-121.382318, 38.562934),\n    (-121.379047, 38.559053),\n    (-121.358295, 38.561163),\n    (-121.323309, 38.578953),\n    (-121.342739, 38.578995),\n    (-121.342866, 38.579086),\n    (-121.383097, 38.565764)\n]\ninner_ring = [\n    (-121.367281, 38.567214),\n    (-121.352168, 38.572258),\n    (-121.345857, 38.570301),\n    (-121.362633, 38.562622),\n    (-121.367281, 38.567214)\n]\npoly_with_hole = Polygon(outer_ring, holes=[inner_ring])\nprint(f'Polygon with hole: {len(poly_with_hole.interiors)} holes')\n\n# Create MultiPoint geometry\nmultipoint_coords = [\n    (-121.366489, 38.565485),\n    (-121.365405, 38.563835),\n    (-121.363352, 38.566422)\n]\nmultipoint = MultiPoint(multipoint_coords)\nprint(f'MultiPoint: {multipoint.type} with {len(multipoint.points)} points')\n\n# Create MultiPolygon geometry\npoly1 = Polygon([\n    (-121.433775, 38.544254),\n    (-121.422917, 38.540376),\n    (-121.424263, 38.547474),\n    (-121.433775, 38.544254)\n])\npoly2 = Polygon([\n    (-121.456113, 38.552220),\n    (-121.459991, 38.541350),\n    (-121.440053, 38.537820),\n    (-121.440092, 38.548303),\n    (-121.456113, 38.552220)\n])\nmultipolygon = MultiPolygon([poly1, poly2])\nprint(f'MultiPolygon: {multipolygon.type} with {len(multipolygon.polygons)} polygons')\n\n# Create MultiLineString geometry\nline1 = LineString([(-121.36, 38.56), (-121.35, 38.57)])\nline2 = LineString([(-121.34, 38.55), (-121.33, 38.56)])\nmultilinestring = MultiLineString([line1, line2])\nprint(f'MultiLineString: {multilinestring.type} with {len(multilinestring.linestrings)} lines')\n\n# Demonstrate GeoSpatialUtil\nprint('\\n--- GeoSpatialUtil Features ---')\ngsu = GeoSpatialUtil(polygon)\nprint(f'GeoSpatialUtil shape type: {gsu.shape_type}')\n\n# Convert to GeoJSON\ngeojson = polygon.__geo_interface__\nprint(f'GeoJSON type: {geojson[\"type\"]}')\nprint(f'Coordinates count: {len(geojson[\"coordinates\"][0])}')\n\n# Create GeoSpatialCollection\nprint('\\n--- GeoSpatialCollection ---')\nshapes = [point, linestring, polygon]\ncollection = GeoSpatialCollection(shapes)\nprint(f'Collection contains {len(collection.shapelist)} shapes')\nfor i, shape in enumerate(collection.shapelist):\n    print(f'  Shape {i+1}: {shape.shape_type}')\n\n# Demonstrate Collection geometry\ngeom_collection = Collection([point, linestring, polygon])\nprint(f'\\nGeometry Collection: {geom_collection.type}')\nprint(f'Contains {len(geom_collection.geometries)} geometries')\n\n# Write and run the model\nprint('\\n--- Running MODFLOW 6 Model ---')\nsim.write_simulation()\nsuccess = sim.run_simulation(exe_name='/home/danilopezmella/flopy_expert/bin/mf6', silent=True)\n\nif success:\n    print('Model ran successfully!')\n    \n    # Read heads for spatial analysis\n    head = gwf.output.head().get_data()\n    print(f'Head array shape: {head.shape}')\n    print(f'Min head: {head.min():.2f}, Max head: {head.max():.2f}')\n    \n    # Demonstrate how spatial features could be used with model\n    print('\\n--- Spatial Analysis Integration ---')\n    print('Geometric features can be used to:')\n    print('  - Define model boundaries from shapefiles')\n    print('  - Extract model results at specific locations (points)')\n    print('  - Create observation networks (multipoints)')\n    print('  - Define river reaches (linestrings)')\n    print('  - Delineate zones for parameter estimation (polygons)')\n    print('  - Handle complex boundaries (polygons with holes)')\n    print('  - Manage multi-part features (multipolygons, multilinestrings)')\nelse:\n    print('Model failed to run')\n\nprint('\\n=== Geospatial Utilities Demo Complete ===')"
    }
  ]
}