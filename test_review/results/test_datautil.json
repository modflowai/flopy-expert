{
  "metadata": {
    "purpose": "Demonstrates utility functions for parsing and manipulating MODFLOW input data lines, including splitting comma/space delimited data and handling various data formats",
    "primary_phase": 7,
    "modflow_version": "mf6",
    "packages_used": [
      "flopy.utils.datautil"
    ],
    "keywords": [
      "data parsing",
      "input parsing",
      "PyListUtil",
      "split_data_line",
      "data utilities",
      "string parsing",
      "comma delimited",
      "space delimited",
      "data manipulation",
      "input processing"
    ]
  },
  "models": [
    {
      "name": "datautil_parsing_example",
      "description": "Demonstrates PyListUtil data parsing utilities for handling MODFLOW input formats",
      "code": "import os\nimport numpy as np\nimport flopy\nfrom flopy.utils.datautil import PyListUtil\n\n# Create workspace\nws = './datautil_example'\nif not os.path.exists(ws):\n    os.makedirs(ws)\n\n# Phase 1: Discretization\nprint('\\n=== Phase 1: Basic Model Setup ===')\nnlay, nrow, ncol = 2, 10, 10\nsim = flopy.mf6.MFSimulation(sim_name='datautil_demo', sim_ws=ws, exe_name='mf6')\ntdis = flopy.mf6.ModflowTdis(sim, time_units='DAYS', nper=1, perioddata=[(1.0, 1, 1.0)])\ngwf = flopy.mf6.ModflowGwf(sim, modelname='model', save_flows=True)\nims = flopy.mf6.ModflowIms(sim, print_option='SUMMARY')\nsim.register_ims_package(ims, [gwf.name])\n\ndis = flopy.mf6.ModflowGwfdis(\n    gwf,\n    nlay=nlay,\n    nrow=nrow,\n    ncol=ncol,\n    delr=100.0,\n    delc=100.0,\n    top=10.0,\n    botm=[5.0, 0.0]\n)\n\n# Phase 2: Flow Properties\nnpf = flopy.mf6.ModflowGwfnpf(gwf, icelltype=1, k=10.0)\nsto = flopy.mf6.ModflowGwfsto(gwf, iconvert=1, ss=1e-5, sy=0.2)\n\n# Phase 3: Initial Conditions\nic = flopy.mf6.ModflowGwfic(gwf, strt=10.0)\n\n# Phase 4: Boundary Conditions with parsed data\nprint('\\n=== Phase 4: Demonstrating Data Parsing ===')\n\n# Example 1: Parse comma-delimited well pumping rates\nwell_data_line = \"100.5, 200.0, 150.75, 300.0, 250.5\"\nprint(f'\\nParsing well rates: \"{well_data_line}\"')\nparsed_rates = PyListUtil.split_data_line(well_data_line)\nprint(f'Parsed rates: {parsed_rates}')\n\n# Convert to well stress period data\nwell_spd = []\nfor i, rate in enumerate(parsed_rates[:min(5, len(parsed_rates))]):\n    # Place wells in different cells\n    row = i % nrow\n    col = i % ncol\n    well_spd.append((0, row, col, -float(rate.strip())))\n\nprint(f'\\nCreated {len(well_spd)} well locations from parsed data')\nwel = flopy.mf6.ModflowGwfwel(gwf, stress_period_data=well_spd)\n\n# Example 2: Parse mixed delimiter boundary head data\nboundary_line = \"5.5  6.0,  7.5   8.0, 9.0\"\nprint(f'\\nParsing boundary heads: \"{boundary_line}\"')\nparsed_heads = PyListUtil.split_data_line(boundary_line)\nprint(f'Parsed heads: {parsed_heads}')\n\n# Convert to CHD stress period data\nchd_spd = []\nfor i, head in enumerate(parsed_heads[:min(3, len(parsed_heads))]):\n    # Place CHD cells on boundaries\n    if i == 0:\n        chd_spd.append((0, 0, 0, float(head.strip())))  # Top-left\n    elif i == 1:\n        chd_spd.append((0, 0, ncol-1, float(head.strip())))  # Top-right\n    else:\n        chd_spd.append((0, nrow-1, 0, float(head.strip())))  # Bottom-left\n\nprint(f'Created {len(chd_spd)} CHD boundary conditions')\nchd = flopy.mf6.ModflowGwfchd(gwf, stress_period_data=chd_spd)\n\n# Example 3: Parse recharge array data\nprint('\\n=== Advanced Data Parsing Examples ===')\n\n# Parse a line with various delimiters and formats\ncomplex_line = \"1.5e-4, 2.0e-4  3.5e-4,4.0e-4   5.5e-4\"\nprint(f'\\nParsing scientific notation: \"{complex_line}\"')\nparsed_values = PyListUtil.split_data_line(complex_line)\nprint(f'Parsed values: {parsed_values}')\n\n# Create recharge array from parsed values\nrch_array = np.zeros((nrow, ncol))\nfor i, val in enumerate(parsed_values):\n    if i < nrow * ncol:\n        row = i // ncol\n        col = i % ncol\n        rch_array[row, col] = float(val.strip())\n\nprint(f'Created recharge array with mean: {np.mean(rch_array):.2e}')\nrch = flopy.mf6.ModflowGwfrcha(gwf, recharge=rch_array)\n\n# Example 4: Handle edge cases in parsing\nprint('\\n=== Edge Cases in Data Parsing ===')\n\n# Trailing delimiters\ntrailing_line = \"10,20,30,40,50,\"\nprint(f'\\nLine with trailing comma: \"{trailing_line}\"')\ntrailing_parsed = PyListUtil.split_data_line(trailing_line)\nprint(f'Parsed (handles trailing): {trailing_parsed}')\n\n# Mixed whitespace\nmixed_space = \"100  ,  200 , 300,400  ,  500\"\nprint(f'\\nMixed whitespace: \"{mixed_space}\"')\nmixed_parsed = PyListUtil.split_data_line(mixed_space)\nprint(f'Parsed (preserves spacing): {mixed_parsed}')\n\n# Tab-delimited (if supported)\ntab_line = \"1.0\\t2.0\\t3.0\\t4.0\\t5.0\"\nprint(f'\\nTab-delimited: \"{tab_line}\"')\ntab_parsed = PyListUtil.split_data_line(tab_line.replace('\\t', ' '))\nprint(f'Parsed tabs as spaces: {tab_parsed}')\n\n# Phase 5: Solver Configuration\nprint('\\n=== Phase 5: Solver Configuration ===')\nims.complexity = 'SIMPLE'\nims.linear_acceleration = 'BICGSTAB'\n\n# Phase 6: Output Control\noc = flopy.mf6.ModflowGwfoc(\n    gwf,\n    head_filerecord='model.hds',\n    budget_filerecord='model.cbc',\n    saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')]\n)\n\n# Write and run simulation\nprint('\\n=== Writing Simulation Files ===')\nsim.write_simulation()\n\n# Phase 7: Post-processing demonstration\nprint('\\n=== Phase 7: Data Utility Summary ===')\nprint('\\nPyListUtil.split_data_line() capabilities:')\nprint('1. Handles comma-delimited data')\nprint('2. Handles space-delimited data')\nprint('3. Handles mixed delimiters')\nprint('4. Preserves whitespace in values')\nprint('5. Handles trailing delimiters')\nprint('6. Works with scientific notation')\n\nprint('\\n=== Example Complete ===')\nprint(f'Model files written to: {os.path.abspath(ws)}')\nprint('\\nThis example demonstrated:')\nprint('- Parsing various data formats for MODFLOW input')\nprint('- Converting parsed data to stress period data')\nprint('- Handling edge cases in data parsing')\nprint('- Creating boundary conditions from parsed strings')"
    }
  ]
}