{
  "metadata": {
    "purpose": "Demonstrates reading and working with MODFLOW formatted head files, including indexing, time/stress period extraction, and basic plotting capabilities",
    "primary_phase": 7,
    "modflow_version": "mf6",
    "packages_used": [
      "DIS",
      "NPF",
      "IC",
      "CHD",
      "IMS",
      "OC"
    ],
    "keywords": [
      "formatted head file",
      "post-processing",
      "head output",
      "time series",
      "stress periods",
      "output reading",
      "FormattedHeadFile"
    ]
  },
  "models": [
    {
      "name": "formatted_headfile_example",
      "description": "Creates a simple MODFLOW 6 model that demonstrates writing and reading formatted head files for post-processing",
      "code": "#!/usr/bin/env python3\n\"\"\"\nFormatted Head File Example\n\nThis example demonstrates how to:\n1. Create a simple MODFLOW 6 model that writes formatted head output\n2. Read and process the formatted head file\n3. Extract data by time, stress period, or index\n4. Access file metadata and headers\n\"\"\"\n\nimport os\nimport numpy as np\nimport flopy\nfrom flopy.utils import FormattedHeadFile\n\n# Model setup\nmodel_name = 'formatted_head_example'\nmodel_ws = 'temp_formatted'\n\n# Create model workspace\nif not os.path.exists(model_ws):\n    os.makedirs(model_ws)\n\n# Phase 1: Discretization\nprint('Phase 1: Setting up model discretization...')\nnlay = 1\nnrow = 15\nncol = 10\ndelr = 100.0\ndelc = 100.0\ntop = 10.0\nbotm = 0.0\n\n# Create simulation\nsim = flopy.mf6.MFSimulation(\n    sim_name=model_name,\n    sim_ws=model_ws,\n    exe_name='/home/danilopezmella/flopy_expert/bin/mf6'\n)\n\n# Create temporal discretization (TDIS)\nperiod_data = [(1.0, 1, 1.0), (86400.0, 50, 1.0)]  # 2 stress periods\ntdis = flopy.mf6.ModflowTdis(\n    sim,\n    nper=2,\n    perioddata=period_data\n)\n\n# Create groundwater flow model\ngwf = flopy.mf6.ModflowGwf(\n    sim,\n    modelname=model_name,\n    save_flows=True\n)\n\n# Create discretization package (DIS)\ndis = flopy.mf6.ModflowGwfdis(\n    gwf,\n    nlay=nlay,\n    nrow=nrow,\n    ncol=ncol,\n    delr=delr,\n    delc=delc,\n    top=top,\n    botm=botm\n)\n\n# Phase 2: Flow properties (NPF)\nprint('Phase 2: Setting flow properties...')\nhk = 10.0\nvk = 1.0\nnpf = flopy.mf6.ModflowGwfnpf(\n    gwf,\n    save_specific_discharge=True,\n    k=hk,\n    k33=vk\n)\n\n# Phase 3: Initial conditions (IC)\nprint('Phase 3: Setting initial conditions...')\nstrt = 10.0\nic = flopy.mf6.ModflowGwfic(gwf, strt=strt)\n\n# Phase 4: Boundary conditions (CHD)\nprint('Phase 4: Setting boundary conditions...')\n# Add constant heads on left and right boundaries\nchd_data = []\nfor row in range(nrow):\n    # Left boundary (column 0)\n    chd_data.append([(0, row, 0), 10.0])\n    # Right boundary (last column)\n    chd_data.append([(0, row, ncol-1), 5.0])\n\nchd = flopy.mf6.ModflowGwfchd(\n    gwf,\n    stress_period_data=chd_data\n)\n\n# Phase 5: Solver configuration (IMS)\nprint('Phase 5: Configuring solver...')\nims = flopy.mf6.ModflowIms(\n    sim,\n    print_option='SUMMARY',\n    complexity='SIMPLE',\n    outer_maximum=100,\n    inner_maximum=50,\n    outer_dvclose=1e-6,\n    inner_dvclose=1e-6\n)\nsim.register_ims_package(ims, [gwf.name])\n\n# Phase 6: Output control\nprint('Phase 6: Setting up output control...')\nhead_file = f'{model_name}.hds'\nbudget_file = f'{model_name}.cbc'\n\noc = flopy.mf6.ModflowGwfoc(\n    gwf,\n    head_filerecord=head_file,\n    budget_filerecord=budget_file,\n    saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')],\n    printrecord=[('HEAD', 'LAST'), ('BUDGET', 'LAST')]\n)\n\n# Write and run the model\nprint('\\nWriting and running model...')\nsim.write_simulation()\nsuccess, buff = sim.run_simulation(silent=True)\n\nif not success:\n    print('Model run failed!')\n    for line in buff:\n        print(line)\nelse:\n    print('Model run successful!')\n    \n    # Phase 7: Post-processing - Read formatted head file\n    print('\\nPhase 7: Post-processing formatted head file...')\n    \n    # Open the head file\n    head_path = os.path.join(model_ws, head_file)\n    hds = flopy.utils.HeadFile(head_path)\n    \n    # Get basic information\n    print(f'\\nHead file information:')\n    print(f'  Number of layers: {hds.nlay}')\n    print(f'  Number of rows: {hds.nrow}')\n    print(f'  Number of columns: {hds.ncol}')\n    print(f'  Number of records: {len(hds)}')\n    \n    # Get available times\n    times = hds.get_times()\n    print(f'\\n  Available times: {times}')\n    \n    # Get stress period/time step information\n    kstpkper = hds.get_kstpkper()\n    print(f'  Stress periods/time steps: {kstpkper}')\n    \n    # Extract head data different ways\n    print('\\nExtracting head data...')\n    \n    # Method 1: Get data by time\n    if len(times) > 0:\n        head_by_time = hds.get_data(totim=times[0])\n        print(f'  Heads at time {times[0]}:')\n        print(f'    Shape: {head_by_time.shape}')\n        print(f'    Min: {np.min(head_by_time):.3f}')\n        print(f'    Max: {np.max(head_by_time):.3f}')\n        print(f'    Mean: {np.mean(head_by_time):.3f}')\n    \n    # Method 2: Get data by stress period/time step\n    if len(kstpkper) > 0:\n        head_by_kstpkper = hds.get_data(kstpkper=kstpkper[0])\n        print(f'\\n  Heads at kstp/kper {kstpkper[0]}:')\n        print(f'    Shape: {head_by_kstpkper.shape}')\n        print(f'    Min: {np.min(head_by_kstpkper):.3f}')\n        print(f'    Max: {np.max(head_by_kstpkper):.3f}')\n    \n    # Method 3: Get data by index\n    head_by_idx = hds.get_data(idx=0)\n    print(f'\\n  Heads at index 0:')\n    print(f'    Shape: {head_by_idx.shape}')\n    \n    # Get all heads for time series analysis\n    all_heads = hds.get_alldata()\n    print(f'\\n  All heads shape: {all_heads.shape}')\n    print(f'  Dimensions: (ntimes, nlay, nrow, ncol)')\n    \n    # Calculate head differences between stress periods\n    if len(times) > 1:\n        head_diff = hds.get_data(totim=times[-1]) - hds.get_data(totim=times[0])\n        print(f'\\n  Head change from first to last time:')\n        print(f'    Max increase: {np.max(head_diff):.3f}')\n        print(f'    Max decrease: {np.min(head_diff):.3f}')\n    \n    # Close the file\n    hds.close()\n    \n    print('\\nFormatted head file processing complete!')\n\n# Clean up\nprint('\\nExample complete!')"
    }
  ]
}