{
  "metadata": {
    "purpose": "Demonstrates the creation of structured (DIS) and unstructured vertex (DISV) grids in MODFLOW 6, showing grid rotation and origin offset capabilities",
    "primary_phase": 1,
    "modflow_version": "mf6",
    "packages_used": [
      "MFSimulation",
      "ModflowGwf",
      "ModflowGwfdis",
      "ModflowGwfdisv",
      "ModflowIms"
    ],
    "keywords": [
      "discretization",
      "dis",
      "disv",
      "vertex grid",
      "structured grid",
      "grid rotation",
      "xorigin",
      "yorigin",
      "angrot",
      "unstructured"
    ]
  },
  "models": [
    {
      "name": "structured_grid_model",
      "description": "Creates a structured DIS grid with rotation and origin offset",
      "code": "#!/usr/bin/env python3\n\"\"\"\nStructured Grid (DIS) Model with Rotation and Origin Offset\n\nThis example demonstrates how to create a structured discretization (DIS) grid\nwith custom origin coordinates and rotation angle in MODFLOW 6.\n\"\"\"\n\nimport numpy as np\nfrom pathlib import Path\nfrom flopy.mf6 import MFSimulation, ModflowGwf, ModflowGwfdis, ModflowIms\nfrom flopy.mf6.modflow import ModflowGwfnpf, ModflowGwfic, ModflowGwfchd, ModflowGwfoc\n\ndef create_structured_grid_model(workspace='.'):\n    \"\"\"Create a MODFLOW 6 model with structured DIS grid\"\"\"\n    \n    # Phase 1: Create simulation and solver\n    sim = MFSimulation(sim_name='dis_model', sim_ws=workspace, exe_name='/home/danilopezmella/flopy_expert/bin/mf6')\n    \n    # Create time discretization (required for simulation)\n    tdis_data = [(1.0, 1, 1.0)]  # One stress period, 1 day\n    sim.register_ims_package(\n        ModflowIms(sim, complexity='simple', outer_maximum=100, inner_maximum=100),\n        [['dis_model']]\n    )\n    sim.name_file.tdis.initialize(\n        nper=1,\n        perioddata=tdis_data\n    )\n    \n    # Create groundwater flow model\n    gwf = ModflowGwf(sim, modelname='dis_model', save_flows=True)\n    \n    # Phase 1: Discretization with rotation and origin offset\n    dis = ModflowGwfdis(\n        gwf,\n        nlay=3,           # 3 layers\n        nrow=21,          # 21 rows\n        ncol=20,          # 20 columns\n        delr=500.0,       # Column width (500 m)\n        delc=500.0,       # Row width (500 m)\n        top=400.0,        # Top elevation\n        botm=[220.0, 200.0, 0.0],  # Bottom elevations for 3 layers\n        xorigin=3000,     # X-coordinate origin offset\n        yorigin=1000,     # Y-coordinate origin offset\n        angrot=10,        # Grid rotation angle (degrees)\n    )\n    \n    # Phase 2: Flow properties (NPF)\n    npf = ModflowGwfnpf(\n        gwf,\n        save_specific_discharge=True,\n        icelltype=0,      # Confined\n        k=10.0,           # Hydraulic conductivity\n    )\n    \n    # Phase 3: Initial conditions\n    ic = ModflowGwfic(gwf, strt=350.0)  # Initial head = 350 m\n    \n    # Phase 4: Boundary conditions (CHD on edges)\n    # Create CHD on left and right boundaries\n    chd_data = []\n    for k in range(3):  # For each layer\n        for i in range(21):  # For each row\n            # Left boundary (column 0)\n            chd_data.append([(k, i, 0), 350.0])\n            # Right boundary (column 19)\n            chd_data.append([(k, i, 19), 340.0])\n    \n    chd = ModflowGwfchd(gwf, stress_period_data=chd_data)\n    \n    # Phase 5: Output control\n    oc = ModflowGwfoc(\n        gwf,\n        budget_filerecord='dis_model.cbc',\n        head_filerecord='dis_model.hds',\n        saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')]\n    )\n    \n    return sim, gwf\n\nif __name__ == '__main__':\n    # Create workspace\n    workspace = Path('dis_model')\n    workspace.mkdir(exist_ok=True)\n    \n    # Build and run the model\n    sim, gwf = create_structured_grid_model(workspace)\n    \n    # Write and run\n    sim.write_simulation()\n    success, buff = sim.run_simulation()\n    \n    # Verify grid properties\n    print(f\"\\nStructured Grid (DIS) Model:\")\n    print(f\"Grid dimensions: {gwf.dis.nlay.get_data()} layers, {gwf.dis.nrow.get_data()} rows, {gwf.dis.ncol.get_data()} columns\")\n    print(f\"Grid origin: X={gwf.dis.xorigin.get_data()}, Y={gwf.dis.yorigin.get_data()}\")\n    print(f\"Grid rotation: {gwf.dis.angrot.get_data()} degrees\")\n    print(f\"Cell dimensions: delr={gwf.dis.delr.get_data()[0]}, delc={gwf.dis.delc.get_data()[0]}\")\n    \n    if success:\n        print(\"\\nModel ran successfully!\")\n    else:\n        print(\"\\nModel failed to run\")"
    },
    {
      "name": "vertex_grid_model",
      "description": "Creates an unstructured vertex (DISV) grid with rotation and origin offset",
      "code": "#!/usr/bin/env python3\n\"\"\"\nVertex Grid (DISV) Model with Rotation and Origin Offset\n\nThis example demonstrates how to create an unstructured vertex discretization (DISV)\ngrid with custom origin coordinates and rotation angle in MODFLOW 6.\n\"\"\"\n\nimport numpy as np\nfrom pathlib import Path\nfrom flopy.mf6 import MFSimulation, ModflowGwf, ModflowGwfdisv, ModflowIms\nfrom flopy.mf6.modflow import ModflowGwfnpf, ModflowGwfic, ModflowGwfchd, ModflowGwfoc\n\ndef create_vertex_grid_model(workspace='.'):\n    \"\"\"Create a MODFLOW 6 model with vertex DISV grid\"\"\"\n    \n    # Phase 1: Create simulation and solver\n    sim = MFSimulation(sim_name='disv_model', sim_ws=workspace, exe_name='/home/danilopezmella/flopy_expert/bin/mf6')\n    \n    # Create time discretization (required for simulation)\n    tdis_data = [(1.0, 1, 1.0)]  # One stress period, 1 day\n    sim.register_ims_package(\n        ModflowIms(sim, complexity='simple', outer_maximum=100, inner_maximum=100),\n        [['disv_model']]\n    )\n    sim.name_file.tdis.initialize(\n        nper=1,\n        perioddata=tdis_data\n    )\n    \n    # Create groundwater flow model\n    gwf = ModflowGwf(sim, modelname='disv_model', save_flows=True)\n    \n    # Phase 1: Create vertex grid geometry\n    nrow, ncol = 21, 20\n    delr, delc = 500.0, 500.0\n    ncpl = nrow * ncol  # Number of cells per layer\n    \n    # Create vertex coordinates\n    xv = np.linspace(0, delr * ncol, ncol + 1)\n    yv = np.linspace(delc * nrow, 0, nrow + 1)\n    xv, yv = np.meshgrid(xv, yv)\n    xv = xv.ravel()\n    yv = yv.ravel()\n    \n    # Function to get vertex list for a cell\n    def get_vlist(i, j, nrow, ncol):\n        v1 = i * (ncol + 1) + j\n        v2 = v1 + 1\n        v3 = v2 + ncol + 1\n        v4 = v3 - 1\n        return [v1, v2, v3, v4]\n    \n    # Create cell-to-vertex connectivity\n    iverts = []\n    for i in range(nrow):\n        for j in range(ncol):\n            iverts.append(get_vlist(i, j, nrow, ncol))\n    \n    nvert = xv.shape[0]  # Number of vertices\n    verts = np.hstack((xv.reshape(nvert, 1), yv.reshape(nvert, 1)))\n    \n    # Calculate cell centers\n    cellxy = np.empty((ncpl, 2))\n    for icpl in range(ncpl):\n        iv = iverts[icpl]\n        cellxy[icpl, 0] = (xv[iv[0]] + xv[iv[1]]) / 2.0\n        cellxy[icpl, 1] = (yv[iv[1]] + yv[iv[2]]) / 2.0\n    \n    # Create cell2d list: [icpl, xc, yc, nv, iv1, iv2, iv3, iv4]\n    cell2d = [\n        [icpl, cellxy[icpl, 0], cellxy[icpl, 1], 4] + iverts[icpl]\n        for icpl in range(ncpl)\n    ]\n    \n    # Create vertices list: [ivert, x, y]\n    vertices = [[ivert, verts[ivert, 0], verts[ivert, 1]] for ivert in range(nvert)]\n    \n    # Grid transformation parameters\n    xorigin = 3000\n    yorigin = 1000\n    angrot = 10\n    \n    # Create DISV package\n    disv = ModflowGwfdisv(\n        gwf,\n        nlay=3,           # 3 layers\n        ncpl=ncpl,        # Cells per layer\n        top=400.0,        # Top elevation\n        botm=[220.0, 200.0, 0.0],  # Bottom elevations for 3 layers\n        nvert=nvert,      # Number of vertices\n        vertices=vertices,\n        cell2d=cell2d,\n        xorigin=xorigin,  # X-coordinate origin offset\n        yorigin=yorigin,  # Y-coordinate origin offset\n        angrot=angrot,    # Grid rotation angle (degrees)\n    )\n    \n    # Set coordinate info on modelgrid\n    gwf.modelgrid.set_coord_info(xoff=xorigin, yoff=yorigin, angrot=angrot)\n    \n    # Phase 2: Flow properties (NPF)\n    npf = ModflowGwfnpf(\n        gwf,\n        save_specific_discharge=True,\n        icelltype=0,      # Confined\n        k=10.0,           # Hydraulic conductivity\n    )\n    \n    # Phase 3: Initial conditions\n    ic = ModflowGwfic(gwf, strt=350.0)  # Initial head = 350 m\n    \n    # Phase 4: Boundary conditions (CHD on edges)\n    # Create CHD on left and right boundaries\n    chd_data = []\n    for k in range(3):  # For each layer\n        for i in range(nrow):  # For each row\n            # Left boundary (first column cells)\n            cell_id = i * ncol  # First cell in row\n            chd_data.append([(k, cell_id), 350.0])\n            # Right boundary (last column cells)\n            cell_id = i * ncol + (ncol - 1)  # Last cell in row\n            chd_data.append([(k, cell_id), 340.0])\n    \n    chd = ModflowGwfchd(gwf, stress_period_data=chd_data)\n    \n    # Phase 5: Output control\n    oc = ModflowGwfoc(\n        gwf,\n        budget_filerecord='disv_model.cbc',\n        head_filerecord='disv_model.hds',\n        saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')]\n    )\n    \n    return sim, gwf\n\nif __name__ == '__main__':\n    # Create workspace\n    workspace = Path('disv_model')\n    workspace.mkdir(exist_ok=True)\n    \n    # Build and run the model\n    sim, gwf = create_vertex_grid_model(workspace)\n    \n    # Write and run\n    sim.write_simulation()\n    success, buff = sim.run_simulation()\n    \n    # Verify grid properties\n    print(f\"\\nVertex Grid (DISV) Model:\")\n    print(f\"Number of layers: {gwf.disv.nlay.get_data()}\")\n    print(f\"Cells per layer: {gwf.disv.ncpl.get_data()}\")\n    print(f\"Number of vertices: {gwf.disv.nvert.get_data()}\")\n    print(f\"Grid origin: X={gwf.disv.xorigin.get_data()}, Y={gwf.disv.yorigin.get_data()}\")\n    print(f\"Grid rotation: {gwf.disv.angrot.get_data()} degrees\")\n    \n    if success:\n        print(\"\\nModel ran successfully!\")\n    else:\n        print(\"\\nModel failed to run\")"
    }
  ]
}