{
  "metadata": {
    "purpose": "Demonstrates grid intersection utilities for finding intersections between geometric shapes (points, lines, polygons) and both structured and unstructured grids, including triangular meshes.",
    "primary_phase": 1,
    "modflow_version": "mf6",
    "packages_used": [
      "flopy.discretization.structuredgrid",
      "flopy.discretization.vertexgrid",
      "flopy.utils.gridintersect",
      "flopy.utils.triangle"
    ],
    "keywords": [
      "grid intersection",
      "vertex grid",
      "structured grid",
      "triangular mesh",
      "shapely geometry",
      "spatial analysis",
      "grid cells",
      "polygon intersection",
      "line intersection",
      "unstructured grid"
    ]
  },
  "models": [
    {
      "name": "structured_grid_intersection",
      "description": "Demonstrates intersection of geometric shapes with a structured grid",
      "code": "import numpy as np\nimport flopy.discretization as fgrid\nfrom flopy.utils.gridintersect import GridIntersect\n\n# Phase 1: Create structured grid discretization\nprint('Phase 1: Creating structured grid')\ndelc = 10 * np.ones(10, dtype=float)  # 10 rows, 10m spacing\ndelr = 10 * np.ones(10, dtype=float)  # 10 columns, 10m spacing\nsgr = fgrid.StructuredGrid(\n    delc,\n    delr,\n    xoff=0,\n    yoff=0,\n    angrot=0\n)\n\n# Create grid intersect object\nix = GridIntersect(sgr, method='structured')\n\n# Test point intersection\nprint('\\nTesting point intersection:')\npoint = (25, 25)  # Point in middle of grid\nresult = ix.intersect(point, shapetype='point')\nif result:\n    print(f'Point {point} intersects cell: {result.cellids[0]}')\n\n# Test line intersection\nprint('\\nTesting line intersection:')\nline = [(5, 5), (95, 95)]  # Diagonal line across grid\nresult = ix.intersect(line, shapetype='linestring')\nif result:\n    print(f'Line intersects {len(result.cellids)} cells')\n    print(f'First 5 cells: {result.cellids[:5]}')\n\n# Test polygon intersection\nprint('\\nTesting polygon intersection:')\npolygon = [(20, 20), (40, 20), (40, 40), (20, 40), (20, 20)]  # Square polygon\nresult = ix.intersect(polygon, shapetype='polygon')\nif result:\n    print(f'Polygon intersects {len(result.cellids)} cells')\n    print(f'Cell IDs: {result.cellids}')\n    print(f'Intersection areas: {result.areas}')\n\n# Verify grid properties\nprint('\\nGrid properties:')\nprint(f'Grid shape (nrow, ncol): ({sgr.nrow}, {sgr.ncol})')\nprint(f'Grid extent: x=[{sgr.xoffset}, {sgr.xoffset + sgr.delr.sum()}], y=[{sgr.yoffset}, {sgr.yoffset + sgr.delc.sum()}]')\nprint(f'Total cells: {sgr.ncpl}')"
    },
    {
      "name": "vertex_grid_intersection",
      "description": "Demonstrates intersection of geometric shapes with an unstructured vertex (triangular) grid",
      "code": "import numpy as np\nimport flopy.discretization as fgrid\nfrom flopy.utils.gridintersect import GridIntersect\n\n# Phase 1: Create vertex grid (triangular mesh) discretization\nprint('Phase 1: Creating triangular vertex grid')\n\n# Define triangular mesh manually (8 triangular cells)\ncell2d = [\n    [0, 16.666666666666668, 13.333333333333334, 3, 4, 2, 7],\n    [1, 3.3333333333333335, 6.666666666666667, 3, 4, 0, 5],\n    [2, 6.666666666666667, 16.666666666666668, 3, 1, 8, 4],\n    [3, 3.3333333333333335, 13.333333333333334, 3, 5, 1, 4],\n    [4, 6.666666666666667, 3.3333333333333335, 3, 6, 0, 4],\n    [5, 13.333333333333334, 3.3333333333333335, 3, 4, 3, 6],\n    [6, 16.666666666666668, 6.666666666666667, 3, 7, 3, 4],\n    [7, 13.333333333333334, 16.666666666666668, 3, 8, 2, 4]\n]\n\nvertices = [\n    [0, 0.0, 0.0],\n    [1, 0.0, 20.0],\n    [2, 20.0, 20.0],\n    [3, 20.0, 0.0],\n    [4, 10.0, 10.0],\n    [5, 0.0, 10.0],\n    [6, 10.0, 0.0],\n    [7, 20.0, 10.0],\n    [8, 10.0, 20.0]\n]\n\n# Create vertex grid\ntgr = fgrid.VertexGrid(\n    vertices,\n    cell2d,\n    botm=np.atleast_2d(np.zeros(len(cell2d))),\n    top=np.ones(len(cell2d))\n)\n\n# Create grid intersect object\nix = GridIntersect(tgr, method='vertex')\n\n# Test point intersection\nprint('\\nTesting point intersection:')\npoint = (10, 10)  # Center point\nresult = ix.intersect(point, shapetype='point')\nif result:\n    print(f'Point {point} intersects cell: {result.cellids[0]}')\n\n# Test line intersection\nprint('\\nTesting line intersection:')\nline = [(0, 0), (20, 20)]  # Diagonal line\nresult = ix.intersect(line, shapetype='linestring')\nif result:\n    print(f'Line intersects {len(result.cellids)} cells')\n    print(f'Cell IDs: {result.cellids}')\n    print(f'Intersection lengths: {result.lengths}')\n\n# Test polygon intersection\nprint('\\nTesting polygon intersection:')\npolygon = [(5, 5), (15, 5), (15, 15), (5, 15), (5, 5)]  # Central square\nresult = ix.intersect(polygon, shapetype='polygon')\nif result:\n    print(f'Polygon intersects {len(result.cellids)} cells')\n    print(f'Cell IDs: {result.cellids}')\n    print(f'Intersection areas: {result.areas}')\n\n# Test multi-polygon intersection\nprint('\\nTesting multi-polygon intersection:')\nmultipolygon = [\n    [(1, 1), (4, 1), (4, 4), (1, 4), (1, 1)],\n    [(16, 16), (19, 16), (19, 19), (16, 19), (16, 16)]\n]\nresult = ix.intersect(multipolygon, shapetype='multipolygon')\nif result:\n    print(f'Multi-polygon intersects {len(result.cellids)} cells')\n    print(f'Cell IDs: {result.cellids}')\n\n# Verify grid properties\nprint('\\nGrid properties:')\nprint(f'Number of cells: {tgr.ncpl}')\nprint(f'Number of vertices: {len(vertices)}')\nprint(f'Grid extent: x=[{tgr.extent[0]}, {tgr.extent[1]}], y=[{tgr.extent[2]}, {tgr.extent[3]}]')"
    },
    {
      "name": "rotated_grid_intersection",
      "description": "Demonstrates intersection with rotated and offset grids",
      "code": "import numpy as np\nimport flopy.discretization as fgrid\nfrom flopy.utils.gridintersect import GridIntersect\n\n# Phase 1: Create rotated structured grid\nprint('Phase 1: Creating rotated structured grid')\ndelc = 10 * np.ones(5, dtype=float)  # 5 rows\ndelr = 10 * np.ones(5, dtype=float)  # 5 columns\n\n# Create grid with 45 degree rotation and offset\nangrot = 45.0  # degrees\nxoff = 10.0\nyoff = 10.0\n\nsgr = fgrid.StructuredGrid(\n    delc,\n    delr,\n    xoff=xoff,\n    yoff=yoff,\n    angrot=angrot\n)\n\n# Create grid intersect object\nix = GridIntersect(sgr, method='structured')\n\n# Test point intersection with rotated grid\nprint('\\nTesting point intersection with rotated grid:')\npoint = (35, 35)  # Point in rotated grid\nresult = ix.intersect(point, shapetype='point')\nif result:\n    print(f'Point {point} intersects cell: {result.cellids[0]}')\n    print(f'Local coordinates: {ix.intersect_point(point)}')\n\n# Test line intersection with rotated grid\nprint('\\nTesting line intersection with rotated grid:')\nline = [(20, 20), (50, 50)]  # Line through rotated grid\nresult = ix.intersect(line, shapetype='linestring')\nif result:\n    print(f'Line intersects {len(result.cellids)} cells')\n    print(f'Cell IDs: {result.cellids}')\n    print(f'Intersection lengths: {result.lengths[:5]}')\n\n# Test polygon intersection with rotated grid\nprint('\\nTesting polygon intersection with rotated grid:')\n# Rectangle in real-world coordinates\npolygon = [(25, 25), (45, 25), (45, 45), (25, 45), (25, 25)]\nresult = ix.intersect(polygon, shapetype='polygon')\nif result:\n    print(f'Polygon intersects {len(result.cellids)} cells')\n    print(f'Cell IDs: {result.cellids}')\n    print(f'Intersection areas: {result.areas}')\n\n# Compare with non-rotated grid\nprint('\\nComparing with non-rotated grid:')\nsgr_norot = fgrid.StructuredGrid(\n    delc,\n    delr,\n    xoff=xoff,\n    yoff=yoff,\n    angrot=0  # No rotation\n)\nix_norot = GridIntersect(sgr_norot, method='structured')\n\n# Same polygon with non-rotated grid\nresult_norot = ix_norot.intersect(polygon, shapetype='polygon')\nif result_norot:\n    print(f'Non-rotated grid: polygon intersects {len(result_norot.cellids)} cells')\n    print(f'Rotated grid: polygon intersects {len(result.cellids)} cells')\n\n# Verify grid properties\nprint('\\nRotated grid properties:')\nprint(f'Grid shape (nrow, ncol): ({sgr.nrow}, {sgr.ncol})')\nprint(f'Rotation angle: {sgr.angrot} degrees')\nprint(f'Offset: ({sgr.xoffset}, {sgr.yoffset})')\nprint(f'Grid corners (rotated):')\nfor i, corner in enumerate(['LL', 'LR', 'UR', 'UL']):\n    x, y = sgr.get_coords(*sgr.get_coords(0, 0) if i==0 else \n                          sgr.get_coords(0, sgr.ncol-1) if i==1 else\n                          sgr.get_coords(sgr.nrow-1, sgr.ncol-1) if i==2 else\n                          sgr.get_coords(sgr.nrow-1, 0))\n    print(f'  {corner}: ({x:.2f}, {y:.2f})')"
    }
  ]
}