{
  "metadata": {
    "test_analysis": {
      "true_purpose": "Testing the comparison utilities for comparing model outputs (heads and budgets) between different model runs, including difference calculation functions",
      "is_useful_example": true,
      "example_demonstrates": "How to create a basic MODFLOW-2005 model with wells and compare outputs"
    },
    "documentation": {
      "purpose": "Demonstrates creation of a simple 3-layer MODFLOW-2005 model with well boundary conditions and shows how to save/load models for comparison purposes.",
      "key_concepts": [
        "3D model discretization",
        "Ibound array configuration",
        "Well package with auxiliary variables",
        "Model saving and loading",
        "Output comparison utilities"
      ],
      "questions_answered": [
        "How do I create a simple 3-layer MODFLOW-2005 model?",
        "How do I set up wells with auxiliary variables?",
        "How do I configure inactive and constant head cells using ibound?",
        "How do I save and reload a MODFLOW model?",
        "How do I change the model workspace directory?"
      ],
      "common_use_cases": [
        "Setting up a basic groundwater flow model for testing",
        "Creating models with multiple stress periods and wells",
        "Comparing model outputs between different scenarios",
        "Model archiving and workspace management"
      ]
    },
    "classification": {
      "primary_phase": 4,
      "secondary_phases": [
        1,
        2,
        3,
        5
      ],
      "modflow_version": "mf2005",
      "packages_used": [
        "Modflow",
        "ModflowDis",
        "ModflowBas",
        "ModflowLpf",
        "ModflowWel",
        "ModflowOc",
        "ModflowPcg"
      ]
    },
    "search_metadata": {
      "keywords": [
        "comparison",
        "mf2005",
        "wells",
        "auxiliary variables",
        "ibound",
        "3-layer model",
        "model loading",
        "workspace management",
        "stress period data"
      ],
      "embedding_string": "This example demonstrates creating a simple 3-layer MODFLOW-2005 groundwater flow model with well boundary conditions that include auxiliary variables. The model shows how to configure the discretization with 3 layers, set up ibound arrays to define inactive and constant head cells, add wells with flux rates and auxiliary data, and configure the LPF flow package and PCG solver. It also demonstrates model persistence by writing, running, and reloading the model, as well as changing the model workspace. This is useful for testing model comparison utilities and understanding basic MODFLOW-2005 model structure."
    }
  },
  "models": [
    {
      "variant": "basic",
      "description": "Simple 3-layer MODFLOW-2005 model with wells",
      "code": "import os\nimport numpy as np\nimport flopy\n\n# Model configuration\nmodel_name = 'comparison_model'\nmodel_ws = 'model_output'\nnlay = 3\nnrow = 3\nncol = 3\n\n# Create model workspace if it doesn't exist\nif not os.path.exists(model_ws):\n    os.makedirs(model_ws)\n\nprint('Creating MODFLOW-2005 model...')\n\n# =============================================================================\n# Phase 1: Discretization\n# =============================================================================\nprint('Phase 1: Setting up model discretization...')\n\n# Create the MODFLOW model object\nml = flopy.modflow.Modflow(\n    modelname=model_name,\n    model_ws=model_ws,\n    verbose=True\n)\n\n# Define the discretization\ndis = flopy.modflow.ModflowDis(\n    ml,\n    nlay=nlay,\n    nrow=nrow,\n    ncol=ncol,\n    top=0,\n    botm=[-1.0, -2.0, -3.0],\n    nper=1,\n    perlen=1.0,\n    nstp=1,\n    steady=True\n)\n\n# =============================================================================\n# Phase 2: Flow Properties\n# =============================================================================\nprint('Phase 2: Setting up flow properties...')\n\n# Layer Property Flow package\nlpf = flopy.modflow.ModflowLpf(\n    ml,\n    hk=10.0,  # Horizontal hydraulic conductivity\n    vka=10.0,  # Vertical hydraulic conductivity\n    ipakcb=102  # Unit number for cell-by-cell budget file\n)\n\n# =============================================================================\n# Phase 3: Initial Conditions\n# =============================================================================\nprint('Phase 3: Setting up initial conditions...')\n\n# Create ibound array (1=active, 0=inactive, -1=constant head)\nibound = np.ones((nlay, nrow, ncol), dtype=int)\nibound[0, 1, 1] = 0  # Inactive cell in layer 1\nibound[0, 0, -1] = -1  # Constant head cell in layer 1\n\n# Basic package (handles initial conditions and ibound)\nbas = flopy.modflow.ModflowBas(\n    ml,\n    ibound=ibound,\n    strt=0.0  # Starting heads\n)\n\n# =============================================================================\n# Phase 4: Boundary Conditions\n# =============================================================================\nprint('Phase 4: Setting up boundary conditions...')\n\n# Create well data with auxiliary variables\nwd = flopy.modflow.ModflowWel.get_empty(ncells=2, aux_names=['v1', 'v2'])\n\n# Well 1: Layer 3, Row 3, Column 3\nwd['k'][0] = 2  # Layer index (0-based)\nwd['i'][0] = 2  # Row index (0-based)\nwd['j'][0] = 2  # Column index (0-based)\nwd['flux'][0] = -1000.0  # Pumping rate (negative for extraction)\nwd['v1'][0] = 1.0  # Auxiliary variable 1\nwd['v2'][0] = 2.0  # Auxiliary variable 2\n\n# Well 2: Layer 3, Row 2, Column 2\nwd['k'][1] = 2  # Layer index (0-based)\nwd['i'][1] = 1  # Row index (0-based)\nwd['j'][1] = 1  # Column index (0-based)\nwd['flux'][1] = -500.0  # Pumping rate\nwd['v1'][1] = 200.0  # Auxiliary variable 1\nwd['v2'][1] = 100.0  # Auxiliary variable 2\n\n# Create well package\nwel_data = {0: wd}  # Stress period 0\nwel = flopy.modflow.ModflowWel(\n    ml,\n    stress_period_data=wel_data,\n    dtype=wd.dtype\n)\n\n# =============================================================================\n# Phase 5: Solver Configuration\n# =============================================================================\nprint('Phase 5: Setting up solver...')\n\n# Preconditioned Conjugate Gradient solver\npcg = flopy.modflow.ModflowPcg(\n    ml,\n    mxiter=100,  # Maximum iterations\n    iter1=30,    # Maximum inner iterations\n    hclose=1e-5,  # Head convergence criterion\n    rclose=1e-5   # Residual convergence criterion\n)\n\n# Output control\noc = flopy.modflow.ModflowOc(\n    ml,\n    stress_period_data={(0, 0): ['print head', 'print budget', 'save head', 'save budget']}\n)\n\n# =============================================================================\n# Phase 6: Write Model Files\n# =============================================================================\nprint('Phase 6: Writing model files...')\nml.write_input()\n\n# =============================================================================\n# Phase 7: Model Verification and Post-processing\n# =============================================================================\nprint('Phase 7: Model verification...')\n\n# Check that files were created\nnam_file = os.path.join(model_ws, f'{model_name}.nam')\nif os.path.exists(nam_file):\n    print(f'Successfully created model files in {model_ws}')\n    print(f'Name file: {nam_file}')\nelse:\n    print('Error: Model files were not created')\n\n# Load the model to verify it can be read\nprint('\\nLoading model to verify structure...')\ntry:\n    m_loaded = flopy.modflow.Modflow.load(\n        f'{model_name}.nam',\n        model_ws=model_ws,\n        verbose=False\n    )\n    print('Model loaded successfully')\n    \n    # Verify well data was preserved\n    wl = m_loaded.wel.stress_period_data[0]\n    print(f'\\nWell package verification:')\n    print(f'Number of wells: {len(wl)}')\n    print(f'Well 1 - Location: Layer {wl[0][0]+1}, Row {wl[0][1]+1}, Column {wl[0][2]+1}')\n    print(f'Well 1 - Pumping rate: {wl[0][3]} m\u00b3/d')\n    print(f'Well 1 - Auxiliary variables: v1={wl[0][4]}, v2={wl[0][5]}')\n    print(f'Well 2 - Location: Layer {wl[1][0]+1}, Row {wl[1][1]+1}, Column {wl[1][2]+1}')\n    print(f'Well 2 - Pumping rate: {wl[1][3]} m\u00b3/d')\n    print(f'Well 2 - Auxiliary variables: v1={wl[1][4]}, v2={wl[1][5]}')\n    \n    # Demonstrate changing model workspace\n    new_ws = os.path.join(model_ws, 'relocated')\n    print(f'\\nChanging model workspace to: {new_ws}')\n    m_loaded.change_model_ws(new_pth=new_ws)\n    print('Model workspace changed successfully')\n    \nexcept Exception as e:\n    print(f'Error loading model: {e}')\n\nprint('\\nModel setup complete!')\nprint('Note: To run this model, you need MODFLOW-2005 executable installed.')\nprint('The model demonstrates:')\nprint('  - 3-layer discretization')\nprint('  - Inactive and constant head cells via ibound')\nprint('  - Wells with auxiliary variables')\nprint('  - Model saving and loading')\nprint('  - Workspace management')"
    }
  ]
}