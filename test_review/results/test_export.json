{
  "metadata": {
    "purpose": "Demonstrates exporting FloPy models to various formats including shapefiles, NetCDF, VTK, and contour plots for structured, vertex, and unstructured grids",
    "primary_phase": 7,
    "modflow_version": "mf6",
    "packages_used": [
      "DIS",
      "DISV",
      "DISU",
      "NPF",
      "IC",
      "CHD",
      "OC",
      "IMS",
      "TDIS",
      "shapefile",
      "netcdf",
      "vtk",
      "export"
    ],
    "keywords": [
      "export",
      "shapefile",
      "netcdf",
      "vtk",
      "contours",
      "visualization",
      "post-processing",
      "grid",
      "disu",
      "disv"
    ]
  },
  "models": [
    {
      "name": "export_structured_grid",
      "description": "Export structured grid model to shapefile and NetCDF formats",
      "code": "import os\nimport numpy as np\nimport flopy\nfrom flopy.mf6 import MFSimulation, ModflowGwf, ModflowGwfdis, ModflowGwfic\nfrom flopy.mf6 import ModflowGwfnpf, ModflowGwfchd, ModflowGwfoc, ModflowIms, ModflowTdis\nfrom flopy.export.shapefile_utils import recarray2shp\nfrom flopy.export import NetCdf\n\n# Setup workspace\nworkspace = 'export_structured'\nif not os.path.exists(workspace):\n    os.makedirs(workspace)\n\n# Phase 1: Create simulation and discretization\nsim = MFSimulation(sim_name='structured_export', sim_ws=workspace, exe_name='mf6')\ntdis = ModflowTdis(sim, time_units='DAYS', nper=1, perioddata=[(1.0, 1, 1.0)])\nims = ModflowIms(sim, print_option='SUMMARY')\n\n# Create GWF model\ngwf = ModflowGwf(sim, modelname='model', save_flows=True)\n\n# Discretization\nnlay, nrow, ncol = 3, 10, 10\ndelr = delc = 100.0\ntop = 100.0\nbotm = [80.0, 60.0, 40.0]\n\ndis = ModflowGwfdis(\n    gwf,\n    nlay=nlay,\n    nrow=nrow,\n    ncol=ncol,\n    delr=delr,\n    delc=delc,\n    top=top,\n    botm=botm\n)\n\n# Phase 2: Flow properties\nk = np.full((nlay, nrow, ncol), 10.0)\nk[1] = 5.0\nk[2] = 1.0\nnpf = ModflowGwfnpf(gwf, k=k)\n\n# Phase 3: Initial conditions\nstrt = np.full((nlay, nrow, ncol), 95.0)\nic = ModflowGwfic(gwf, strt=strt)\n\n# Phase 4: Boundary conditions\nchd_cells = []\nfor k in range(nlay):\n    for i in range(nrow):\n        chd_cells.append([(k, i, 0), 95.0])\n        chd_cells.append([(k, i, ncol-1), 90.0])\nchd = ModflowGwfchd(gwf, stress_period_data=chd_cells)\n\n# Phase 5: Output control\noc = ModflowGwfoc(\n    gwf,\n    budget_filerecord='model.bud',\n    head_filerecord='model.hds',\n    saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')]\n)\n\n# Write and run simulation\nsim.write_simulation()\nprint('Running simulation...')\nsuccess, buff = sim.run_simulation(silent=True)\n\n# Phase 7: Export to different formats\nprint('\\nExporting to shapefile...')\nshp_path = os.path.join(workspace, 'grid.shp')\ngwf.modelgrid.write_shapefile(shp_path)\nprint(f'Shapefile written to: {shp_path}')\n\n# Export model arrays to shapefile\nprint('\\nExporting arrays to shapefile...')\narray_dict = {'k_layer1': k[0], 'k_layer2': k[1], 'k_layer3': k[2]}\nfor name, array in array_dict.items():\n    shp_file = os.path.join(workspace, f'{name}.shp')\n    recarray = gwf.modelgrid.get_cell_attribute_array(array)\n    recarray2shp(recarray, gwf.modelgrid.get_geometry(), shp_file, epsg=4326)\n    print(f'Array {name} exported to: {shp_file}')\n\n# Export to NetCDF\nprint('\\nExporting to NetCDF...')\nif flopy.export.utils.NetCdf is not None:\n    nc_path = os.path.join(workspace, 'model.nc')\n    with NetCdf(nc_path, gwf, mode='w') as nc:\n        nc.initialize_file()\n        nc.initialize_geometry()\n        # Export NPF package arrays\n        npf.export(nc_path)\n    print(f'NetCDF file written to: {nc_path}')\n\nprint('\\nExport complete!')"
    },
    {
      "name": "export_vertex_grid",
      "description": "Export vertex grid (DISV) model to various formats",
      "code": "import os\nimport numpy as np\nimport flopy\nfrom flopy.mf6 import MFSimulation, ModflowGwf, ModflowGwfdisv, ModflowGwfic\nfrom flopy.mf6 import ModflowGwfnpf, ModflowGwfchd, ModflowGwfoc, ModflowIms, ModflowTdis\nfrom flopy.export import vtk\n\n# Setup workspace\nworkspace = 'export_vertex'\nif not os.path.exists(workspace):\n    os.makedirs(workspace)\n\n# Phase 1: Create simulation and discretization\nsim = MFSimulation(sim_name='vertex_export', sim_ws=workspace, exe_name='mf6')\ntdis = ModflowTdis(sim, time_units='DAYS', nper=1, perioddata=[(1.0, 1, 1.0)])\nims = ModflowIms(sim, print_option='SUMMARY')\n\n# Create GWF model\ngwf = ModflowGwf(sim, modelname='model', save_flows=True)\n\n# Create a simple vertex grid\nnlay = 2\nncpl = 9  # 3x3 grid of cells per layer\nnvert = 16  # 4x4 grid of vertices\n\n# Define vertices (4x4 grid)\nvertices = []\nfor i in range(4):\n    for j in range(4):\n        vertices.append([i * 100.0, j * 100.0])\n\n# Define cells (each cell defined by 4 vertices)\ncell2d = []\nfor i in range(3):\n    for j in range(3):\n        v1 = i * 4 + j\n        v2 = v1 + 1\n        v3 = v1 + 5\n        v4 = v1 + 4\n        cell_id = i * 3 + j\n        xc = (vertices[v1][0] + vertices[v2][0]) / 2.0\n        yc = (vertices[v1][1] + vertices[v3][1]) / 2.0\n        cell2d.append([cell_id, xc, yc, 4, v1, v2, v3, v4])\n\ndisv = ModflowGwfdisv(\n    gwf,\n    nlay=nlay,\n    ncpl=ncpl,\n    nvert=nvert,\n    top=100.0,\n    botm=[50.0, 0.0],\n    vertices=vertices,\n    cell2d=cell2d\n)\n\n# Phase 2: Flow properties\nk = np.full((nlay, ncpl), 10.0)\nnpf = ModflowGwfnpf(gwf, k=k)\n\n# Phase 3: Initial conditions\nstrt = np.full((nlay, ncpl), 95.0)\nic = ModflowGwfic(gwf, strt=strt)\n\n# Phase 4: Boundary conditions\nchd_cells = [[(0, 0), 95.0], [(0, 8), 90.0]]\nchd = ModflowGwfchd(gwf, stress_period_data=chd_cells)\n\n# Phase 5: Output control\noc = ModflowGwfoc(\n    gwf,\n    budget_filerecord='model.bud',\n    head_filerecord='model.hds',\n    saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')]\n)\n\n# Write and run simulation\nsim.write_simulation()\nprint('Running simulation...')\nsuccess, buff = sim.run_simulation(silent=True)\n\n# Phase 7: Export to VTK format\nprint('\\nExporting to VTK...')\nvtk_path = os.path.join(workspace, 'model.vtu')\nvtkobj = vtk.Vtk(gwf, xml=True)\nvtkobj.add_array(k.flatten(), 'hydraulic_conductivity')\nvtkobj.add_array(strt.flatten(), 'starting_head')\nvtkobj.write(vtk_path)\nprint(f'VTK file written to: {vtk_path}')\n\n# Export grid to shapefile\nprint('\\nExporting grid to shapefile...')\nshp_path = os.path.join(workspace, 'vertex_grid.shp')\ngwf.modelgrid.write_shapefile(shp_path)\nprint(f'Shapefile written to: {shp_path}')\n\nprint('\\nExport complete!')"
    },
    {
      "name": "export_unstructured_grid",
      "description": "Export unstructured grid (DISU) model with refined area",
      "code": "import os\nimport numpy as np\nimport flopy\nfrom flopy.mf6 import MFSimulation, ModflowGwf, ModflowGwfdisu, ModflowGwfic\nfrom flopy.mf6 import ModflowGwfnpf, ModflowGwfchd, ModflowGwfoc, ModflowIms, ModflowTdis\nfrom flopy.modflow import Modflow, ModflowDis\nfrom flopy.utils.gridgen import Gridgen\nfrom flopy.export import vtk\n\n# Setup workspace\nworkspace = 'export_unstructured'\nif not os.path.exists(workspace):\n    os.makedirs(workspace)\n\n# Create base structured grid for gridgen\nLx = 1000.0\nLy = 1000.0\nnlay = 2\nnrow = 10\nncol = 10\ndelr = Lx / ncol\ndelc = Ly / nrow\ntop = 100.0\nbotm = [50.0, 0.0]\n\n# Create temporary MODFLOW-2005 model for gridgen\nml = Modflow()\ndis = ModflowDis(\n    ml,\n    nlay=nlay,\n    nrow=nrow,\n    ncol=ncol,\n    delr=delr,\n    delc=delc,\n    top=top,\n    botm=botm\n)\n\n# Use gridgen to create unstructured grid with refinement\ng = Gridgen(ml.modelgrid, model_ws=workspace)\n\n# Add refinement in center of model\nxmin = 3 * delr\nxmax = 7 * delr\nymin = 3 * delc\nymax = 7 * delc\nrfpoly = [[[(xmin, ymin), (xmax, ymin), (xmax, ymax), (xmin, ymax), (xmin, ymin)]]]\ng.add_refinement_features(rfpoly, 'polygon', 2, [0, 1])\ng.build(verbose=False)\n\n# Get DISU properties\ngridprops = g.get_gridprops_disu6()\n\n# Phase 1: Create MODFLOW 6 simulation\nsim = MFSimulation(sim_name='unstructured_export', sim_ws=workspace, exe_name='mf6')\ntdis = ModflowTdis(sim, time_units='DAYS', nper=1, perioddata=[(1.0, 1, 1.0)])\nims = ModflowIms(sim, print_option='SUMMARY')\n\n# Create GWF model\ngwf = ModflowGwf(sim, modelname='model', save_flows=True)\n\n# DISU package\ndisu = ModflowGwfdisu(gwf, **gridprops)\n\n# Phase 2: Flow properties\nnnodes = gwf.modelgrid.nnodes\nk = np.random.uniform(1.0, 20.0, nnodes)\nnpf = ModflowGwfnpf(gwf, k=k)\n\n# Phase 3: Initial conditions\nstrt = np.full(nnodes, 95.0)\nic = ModflowGwfic(gwf, strt=strt)\n\n# Phase 4: Boundary conditions\n# Add CHD to edges\nchd_cells = []\nfor node in range(nnodes):\n    x, y = gwf.modelgrid.xcellcenters[node], gwf.modelgrid.ycellcenters[node]\n    if x < 10 or x > Lx - 10:\n        chd_cells.append([(0, node), 95.0 - (x / Lx) * 5.0])\n    elif y < 10 or y > Ly - 10:\n        chd_cells.append([(0, node), 95.0 - (y / Ly) * 5.0])\n\nif chd_cells:\n    chd = ModflowGwfchd(gwf, stress_period_data=chd_cells)\n\n# Phase 5: Output control\noc = ModflowGwfoc(\n    gwf,\n    budget_filerecord='model.bud',\n    head_filerecord='model.hds',\n    saverecord=[('HEAD', 'ALL'), ('BUDGET', 'ALL')]\n)\n\n# Write and run simulation\nsim.write_simulation()\nprint('Running simulation...')\nsuccess, buff = sim.run_simulation(silent=True)\n\n# Phase 7: Export to various formats\nprint('\\nExporting to VTK...')\nvtk_path = os.path.join(workspace, 'unstructured.vtu')\nvtkobj = vtk.Vtk(gwf, xml=True)\nvtkobj.add_array(k, 'hydraulic_conductivity')\nvtkobj.add_array(strt, 'starting_head')\n\n# Add cell IDs for visualization\ncell_ids = np.arange(nnodes)\nvtkobj.add_array(cell_ids, 'cell_id')\n\nvtkobj.write(vtk_path)\nprint(f'VTK file written to: {vtk_path}')\n\n# Export grid to shapefile\nprint('\\nExporting grid to shapefile...')\nshp_path = os.path.join(workspace, 'unstructured_grid.shp')\ngwf.modelgrid.write_shapefile(shp_path)\nprint(f'Shapefile written to: {shp_path}')\n\n# Export model properties\nprint('\\nModel grid summary:')\nprint(f'  Grid type: {gwf.modelgrid.grid_type}')\nprint(f'  Number of nodes: {gwf.modelgrid.nnodes}')\nprint(f'  Number of layers: {gwf.modelgrid.nlay}')\nprint(f'  Refined cells: {nnodes - nrow * ncol * nlay}')\n\nprint('\\nExport complete!')"
    }
  ]
}